// Code generated by MockGen. DO NOT EDIT.
// Source: converter.go

// Package mock_converter is a generated GoMock package.
package mock_converter

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockConverter is a mock of Converter interface.
type MockConverter struct {
	ctrl     *gomock.Controller
	recorder *MockConverterMockRecorder
}

// MockConverterMockRecorder is the mock recorder for MockConverter.
type MockConverterMockRecorder struct {
	mock *MockConverter
}

// NewMockConverter creates a new mock instance.
func NewMockConverter(ctrl *gomock.Controller) *MockConverter {
	mock := &MockConverter{ctrl: ctrl}
	mock.recorder = &MockConverterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConverter) EXPECT() *MockConverterMockRecorder {
	return m.recorder
}

// ConvertToID mocks base method.
func (m *MockConverter) ConvertToID(shortURL string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConvertToID", shortURL)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConvertToID indicates an expected call of ConvertToID.
func (mr *MockConverterMockRecorder) ConvertToID(shortURL interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConvertToID", reflect.TypeOf((*MockConverter)(nil).ConvertToID), shortURL)
}

// ConvertToShortURL mocks base method.
func (m *MockConverter) ConvertToShortURL(id int64) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConvertToShortURL", id)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConvertToShortURL indicates an expected call of ConvertToShortURL.
func (mr *MockConverterMockRecorder) ConvertToShortURL(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConvertToShortURL", reflect.TypeOf((*MockConverter)(nil).ConvertToShortURL), id)
}
