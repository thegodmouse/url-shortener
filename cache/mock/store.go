// Code generated by MockGen. DO NOT EDIT.
// Source: store.go

// Package mock_cache is a generated GoMock package.
package mock_cache

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	record "github.com/thegodmouse/url-shortener/db/record"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// Evict mocks base method.
func (m *MockStore) Evict(ctx context.Context, urlID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Evict", ctx, urlID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Evict indicates an expected call of Evict.
func (mr *MockStoreMockRecorder) Evict(ctx, urlID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Evict", reflect.TypeOf((*MockStore)(nil).Evict), ctx, urlID)
}

// Get mocks base method.
func (m *MockStore) Get(ctx context.Context, urlID string) (*record.ShortURL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, urlID)
	ret0, _ := ret[0].(*record.ShortURL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockStoreMockRecorder) Get(ctx, urlID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockStore)(nil).Get), ctx, urlID)
}

// Set mocks base method.
func (m *MockStore) Set(ctx context.Context, urlID string, record *record.ShortURL) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", ctx, urlID, record)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockStoreMockRecorder) Set(ctx, urlID, record interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockStore)(nil).Set), ctx, urlID, record)
}
